import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import r2_score, mean_squared_error
from scipy.stats import norm
import warnings
warnings.filterwarnings('ignore')

# Configure matplotlib
plt.rcParams['font.family'] = 'sans-serif'
plt.rcParams['font.sans-serif'] = ['DejaVu Sans', 'Arial', 'Helvetica']

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Ro√ßa do Jo√£o - ML Intelligence",
    page_icon="üåæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üåæ An√°lise Inteligente - Ro√ßa do Jo√£o")

def show_header():
    """Exibe o cabe√ßalho personalizado da Ro√ßa do Jo√£o"""
    st.markdown("""
    ### üöÄ Transforme dados da fazenda em decis√µes inteligentes para maximizar cada safra

    Este aplicativo demonstra como a ci√™ncia de dados pode revolucionar o agroneg√≥cio, 
    analisando desde investimentos em marketing digital at√© fatores clim√°ticos e at√© mesmo 
    tradi√ß√µes rurais como as fases da lua üåô.

    **O Desafio do Jo√£o:** Como otimizar investimentos e opera√ß√µes em cada safra de 8 meses?
    - üéØ **Marketing Digital:** TikTok da neta vs Google Ads tradicional
    - üåç **Exporta√ß√£o:** Contratos internacionais que multiplicam receita  
    - üå¶Ô∏è **Clima:** Chuva, sol e temperatura - os verdadeiros chefes da fazenda
    - üåô **Tradi√ß√£o:** Ser√° que plantar na lua crescente realmente funciona?
    - üí∞ **Economia:** Pre√ßos do feij√£o e custos dos insumos

    **Configure seus dados no painel lateral ou explore o dataset de exemplo**
    """)
    
    # Metrics importantes do Jo√£o
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üåæ Hectares", "45.3", "¬±8")
    with col2:
        st.metric("üìÖ Ciclo Safra", "8 meses", "")
    with col3:
        st.metric("üí∞ Receita M√©dia", "R$ 85k", "por safra")
    with col4:
        st.metric("üìà ROI TikTok", "280%", "vs Google 180%")
    
    st.markdown("""
    ---
    *"Na ro√ßa, cada decis√£o conta. Com dados, Jo√£o n√£o depende mais s√≥ da sorte e da experi√™ncia - 
    ele tem ci√™ncia para maximizar cada safra."*

    **üöÄ Empresas agr√≠colas modernas precisam de:**
    - Modelos preditivos para planejar safras
    - An√°lise de ROI em marketing rural  
    - Otimiza√ß√£o de recursos baseada em dados
    - Redu√ß√£o de riscos clim√°ticos e econ√¥micos
    ---
    """)

def load_bayesian_libs():
    """Carrega bibliotecas Bayesianas apenas quando necess√°rio"""
    try:
        import pymc as pm
        import arviz as az
        return pm, az, True
    except ImportError as e:
        st.error(f"Erro ao importar bibliotecas Bayesianas: {e}")
        st.info("Execute: pip install pymc arviz")
        return None, None, False

def generate_sample_data():
    """Gera dados realistas da Ro√ßa do Jo√£o - Ciclo de 8 meses por safra"""
    np.random.seed(42)
    n_samples = 120  # 10 anos de dados (120 safras de 8 meses)
    
    # === FEATURES DE MARKETING DIGITAL ===
    visitas_site = np.random.poisson(2500, n_samples)  # Visitas no site da fazenda
    prod_gourmet_vendas = np.random.poisson(850, n_samples)  # Vendas de produtos especiais (feij√£o org√¢nico, etc)
    ads_tiktok = np.random.exponential(1200, n_samples)  # Investimento TikTok (neta do Jo√£o)
    ads_google = np.random.exponential(800, n_samples)   # Ads no Google
    
    # === FEATURES DE EXPORTA√á√ÉO ===
    contratos_export = np.random.poisson(12, n_samples)  # N√∫mero de contratos de exporta√ß√£o
    
    # === FEATURES CLIM√ÅTICAS (CRUCIAL NO AGRO) ===
    chuva_mm_safra = np.random.gamma(4, 50, n_samples)  # Chuva total na safra (mm)
    temp_media_safra = np.random.normal(24, 3, n_samples)  # Temperatura m√©dia (¬∞C)
    dias_sol_safra = np.random.normal(140, 20, n_samples)  # Dias de sol na safra
    
    # === FEATURES LUNARES (TRADI√á√ÉO RURAL) ===
    fase_lua_plantio = np.random.choice(['Nova', 'Crescente', 'Cheia', 'Minguante'], n_samples)
    fase_lua_colheita = np.random.choice(['Nova', 'Crescente', 'Cheia', 'Minguante'], n_samples)
    
    # === FEATURES ECON√îMICAS ===
    preco_feijao_saca = np.random.normal(180, 25, n_samples)  # Pre√ßo da saca (R$)
    custo_fertilizante = np.random.normal(2500, 300, n_samples)  # Custo fertilizante por hectare
    
    # === FEATURES OPERACIONAIS ===
    hectares_plantados = np.random.normal(45, 8, n_samples)  # √Årea plantada
    funcionarios_safra = np.random.poisson(8, n_samples)  # N√∫mero de funcion√°rios
    
    # === VARI√ÅVEL TARGET: VENDAS POR SAFRA ===
    # Simulando uma rela√ß√£o complexa e realista
    vendas_base = (
        # Marketing digital (impacto moderado)
        0.8 * visitas_site +
        1.2 * prod_gourmet_vendas +
        0.3 * ads_tiktok +
        0.4 * ads_google +
        
        # Exporta√ß√£o (alto impacto)
        800 * contratos_export +
        
        # Clima (MUITO importante no agro)
        2.5 * chuva_mm_safra +
        50 * (temp_media_safra - 20) +  # Temperatura ideal ~20-25¬∞C
        8 * dias_sol_safra +
        
        # Economia
        45 * preco_feijao_saca +
        -0.8 * custo_fertilizante +
        
        # Operacional
        450 * hectares_plantados +
        120 * funcionarios_safra +
        
        # Ru√≠do realista
        np.random.normal(0, 3000, n_samples)
    )
    
    # Ajustes por fase da lua (baseado em cren√ßas populares rurais)
    lua_bonus_plantio = np.where(fase_lua_plantio == 'Crescente', 1500, 
                        np.where(fase_lua_plantio == 'Cheia', 1200, 0))
    lua_bonus_colheita = np.where(fase_lua_colheita == 'Cheia', 2000,
                         np.where(fase_lua_colheita == 'Minguante', -800, 0))
    
    vendas_safra = vendas_base + lua_bonus_plantio + lua_bonus_colheita
    vendas_safra = np.maximum(vendas_safra, 5000)  # Minimum viable safra
    
    # === CRIAR DATAFRAME ===
    data = pd.DataFrame({
        # Marketing Digital
        'visitas_site_ciclo': visitas_site.astype(int),
        'prod_gourmet_vendas': prod_gourmet_vendas.astype(int),
        'ads_tiktok_invest': ads_tiktok.round(0).astype(int),
        'ads_google_invest': ads_google.round(0).astype(int),
        
        # Exporta√ß√£o
        'contratos_export': contratos_export,
        
        # Clima
        'chuva_mm_safra': chuva_mm_safra.round(1),
        'temp_media_safra': temp_media_safra.round(1),
        'dias_sol_safra': dias_sol_safra.round(0).astype(int),
        
        # Lunar
        'fase_lua_plantio': fase_lua_plantio,
        'fase_lua_colheita': fase_lua_colheita,
        
        # Econ√¥mico
        'preco_feijao_saca': preco_feijao_saca.round(2),
        'custo_fertilizante_ha': custo_fertilizante.round(0).astype(int),
        
        # Operacional
        'hectares_plantados': hectares_plantados.round(1),
        'funcionarios_safra': funcionarios_safra,
        
        # TARGET
        'vendas_safra_reais': vendas_safra.round(0).astype(int)
    })
    
    return data

def preprocess_data(data):
    """Preprocessa os dados"""
    data_processed = data.copy()
    
    # Tratar coluna de data se existir
    if 'data' in data_processed.columns:
        data_processed['dia_semana'] = pd.to_datetime(data_processed['data']).dt.dayofweek
        data_processed = data_processed.drop('data', axis=1)

    # Codificar vari√°veis categ√≥ricas
    categorical_cols = data_processed.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        le = LabelEncoder()
        data_processed[col] = le.fit_transform(data_processed[col])

    # Identificar target - agora procura por 'vendas_safra_reais' primeiro
    possible_targets = ['vendas_safra_reais', 'vendas', 'conversoes', 'sales', 'target', 'y']
    target_col = None
    
    for target in possible_targets:
        if target in data_processed.columns:
            target_col = target
            break
    
    if target_col is None:
        # Use a √∫ltima coluna num√©rica como target
        numeric_cols = data_processed.select_dtypes(include=[np.number]).columns
        if len(numeric_cols) > 0:
            target_col = numeric_cols[-1]
        else:
            st.error("‚ùå Nenhuma coluna target v√°lida encontrada!")
            return None, None, None
    
    features = [col for col in data_processed.columns if col != target_col]
    
    return data_processed, features, target_col

def run_mle_analysis(data, features, target):
    """Executa an√°lise MLE"""
    X = data[features]
    y = data[target]

    # Normalizar os dados
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    model = LinearRegression()
    model.fit(X_scaled, y)

    # Criar dataframe de resultados
    results = pd.DataFrame({
        'Feature': features,
        'Coeficiente': model.coef_,
        'Magnitude_Absoluta': np.abs(model.coef_)
    }).sort_values('Magnitude_Absoluta', ascending=False)

    # M√©tricas
    y_pred = model.predict(X_scaled)
    r2 = r2_score(y, y_pred)
    mse = mean_squared_error(y, y_pred)

    return results, r2, mse, scaler, model

def run_map_analysis(data, features, target, scaler):
    """Executa an√°lise MAP (Ridge)"""
    X = data[features]
    y = data[target]
    
    X_scaled = scaler.transform(X)

    model = Ridge(alpha=1.0)
    model.fit(X_scaled, y)

    results = pd.DataFrame({
        'Feature': features,
        'Coeficiente': model.coef_,
        'Magnitude_Absoluta': np.abs(model.coef_)
    }).sort_values('Magnitude_Absoluta', ascending=False)

    # M√©tricas
    y_pred = model.predict(X_scaled)
    r2 = r2_score(y, y_pred)
    mse = mean_squared_error(y, y_pred)

    return results, r2, mse, model

def run_bayesian_analysis(data, features, target, scaler, draws=1000, tune=1000):
    """Executa an√°lise Bayesiana"""
    pm, az, success = load_bayesian_libs()
    if not success:
        return None

    X = data[features]
    y = data[target]
    X_scaled = scaler.transform(X)

    with pm.Model() as model:
        # Priors mais informativos
        coefficients = pm.Normal('coefficients', mu=0, sigma=2, shape=len(features))
        intercept = pm.Normal('intercept', mu=y.mean(), sigma=y.std())
        sigma = pm.HalfNormal('sigma', sigma=y.std())

        # Likelihood
        mu = intercept + pm.math.dot(X_scaled, coefficients)
        likelihood = pm.Normal('y', mu=mu, sigma=sigma, observed=y)

        # Sampling com configura√ß√µes seguras
        try:
            trace = pm.sample(
                draws=draws, 
                tune=tune, 
                return_inferencedata=True,
                cores=1,  # Single core para evitar problemas
                chains=2,  # Menos chains
                target_accept=0.9,
                progressbar=False  # Desabilitar progress do PyMC
            )
        except Exception as e:
            st.error(f"‚ùå Erro durante MCMC sampling: {e}")
            return None

    # Resumo das distribui√ß√µes posteriores
    summary = az.summary(trace, var_names=['coefficients'])
    summary['Feature'] = features
    summary['|Mean|'] = np.abs(summary['mean'])

    results = summary[['Feature', 'mean', 'sd', 'hdi_3%', 'hdi_97%', '|Mean|']].sort_values('|Mean|', ascending=False)

    return results, trace

def compute_entropy(residuals, bins=30):
    """Calcula entropia aproximada de uma distribui√ß√£o a partir dos res√≠duos"""
    hist, bin_edges = np.histogram(residuals, bins=bins, density=True)
    hist = hist[hist > 0]  # remover valores nulos
    entropy = -np.sum(hist * np.log(hist))
    return entropy

def show_entropy_section(y_true, y_pred_mle, y_pred_map, y_pred_bayes=None):
    """Mostra an√°lise de entropia das distribui√ß√µes de erro"""
    st.header("5Ô∏è‚É£ An√°lise de Entropia (Incerteza na Fazenda)")
    st.markdown("""
    Entropia mede a **incerteza de uma distribui√ß√£o** - crucial para o agroneg√≥cio!  
    
    **üåæ Para a Ro√ßa do Jo√£o:**
    - **Baixa entropia** ‚Üí Previs√µes confi√°veis ‚Üí Jo√£o pode planejar com seguran√ßa
    - **Alta entropia** ‚Üí Muita incerteza ‚Üí Jo√£o precisa de mais dados ou fatores externos
    
    F√≥rmula da entropia diferencial:
    $$
    H(p) = -\int p(z) \\ln p(z) \\, dz
    $$
    """)

    residuals_mle = y_true - y_pred_mle
    residuals_map = y_true - y_pred_map
    entropy_mle = compute_entropy(residuals_mle)
    entropy_map = compute_entropy(residuals_map)

    entropies = {
        "MLE (Linear)": entropy_mle,
        "MAP (Ridge)": entropy_map
    }

    if y_pred_bayes is not None:
        residuals_bayes = y_true - y_pred_bayes
        entropy_bayes = compute_entropy(residuals_bayes)
        entropies["Bayesiano"] = entropy_bayes

    # Mostrar resultados
    st.subheader("üìä Entropia dos Modelos de Predi√ß√£o")
    entropy_df = pd.DataFrame(entropies.items(), columns=["Modelo", "Entropia"])
    st.dataframe(entropy_df)

    # Interpreta√ß√£o para o Jo√£o
    best_model = entropy_df.loc[entropy_df['Entropia'].idxmin(), 'Modelo']
    st.success(f"üèÜ **Melhor modelo para Jo√£o:** {best_model} (menor incerteza)")

    # Plot
    fig, ax = plt.subplots(figsize=(8, 5))
    ax.bar(entropies.keys(), entropies.values(), color="green", alpha=0.7)
    ax.set_ylabel("Entropia (Incerteza)")
    ax.set_title("üåæ Incerteza dos Modelos - Ro√ßa do Jo√£o")
    ax.grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig)

def create_comparison_plot(mle_results, map_results, bayesian_results=None):
    """Cria gr√°fico de compara√ß√£o espec√≠fico para agroneg√≥cio"""
    fig, ax = plt.subplots(figsize=(14, 8))
    
    features = mle_results['Feature'].values
    x_pos = np.arange(len(features))
    
    if bayesian_results is not None:
        width = 0.25
        ax.bar(x_pos - width, mle_results['Coeficiente'], width, label='MLE', alpha=0.8, color='lightblue')
        ax.bar(x_pos, map_results['Coeficiente'], width, label='MAP (Ridge)', alpha=0.8, color='lightgreen')
        ax.bar(x_pos + width, bayesian_results['mean'], width, label='Bayesian', alpha=0.8, color='orange')
    else:
        width = 0.35
        ax.bar(x_pos - width/2, mle_results['Coeficiente'], width, label='MLE', alpha=0.8, color='lightblue')
        ax.bar(x_pos + width/2, map_results['Coeficiente'], width, label='MAP (Ridge)', alpha=0.8, color='lightgreen')

    ax.set_xlabel('Fatores da Fazenda')
    ax.set_ylabel('Impacto nas Vendas da Safra (R$)')
    ax.set_title('üåæ Ro√ßa do Jo√£o - Compara√ß√£o dos Fatores de Impacto')
    ax.set_xticks(x_pos)
    ax.set_xticklabels(features, rotation=45, ha='right')
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.axhline(y=0, color='black', linestyle='-', alpha=0.3)
    
    plt.tight_layout()
    return fig

def create_uncertainty_plot(bayesian_results):
    """Cria gr√°fico de incerteza Bayesiana para agroneg√≥cio"""
    if bayesian_results is None:
        return None
    
    fig, ax = plt.subplots(figsize=(12, 10))
    
    features = bayesian_results['Feature'].values
    means = bayesian_results['mean'].values
    lower = bayesian_results['hdi_3%'].values
    upper = bayesian_results['hdi_97%'].values
    
    y_pos = np.arange(len(features))

    # Plot error bars
    ax.errorbar(means, y_pos, xerr=[means - lower, upper - means], 
                fmt='o', capsize=5, capthick=2, markersize=8, color='darkgreen')
    
    ax.set_yticks(y_pos)
    ax.set_yticklabels(features)
    ax.set_xlabel('Impacto nas Vendas (R$)')
    ax.set_title('üåæ Ro√ßa do Jo√£o - Incerteza dos Fatores (Intervalo de Credibilidade 94%)')
    ax.axvline(x=0, color='red', linestyle='--', alpha=0.7, label='Sem Impacto')
    ax.grid(True, alpha=0.3)
    ax.legend()
    
    plt.tight_layout()
    return fig

def main():
    # Mostrar cabe√ßalho personalizado
    show_header()
    
    st.markdown("""
    ### üîë KPIs como b√∫ssolas, dados como chaves escondidas.
    Descubra o **ouro verde** que j√° existe por tr√°s dos n√∫meros da fazenda.

    Fazendas modernas precisam de **modelos sob medida**:  
    n√£o apenas relat√≥rios de safra, mas **ferramentas inteligentes** que revelam padr√µes clim√°ticos, 
    otimizam investimentos e reduzem riscos na agricultura.  
    """)
    
    st.markdown("---")

    # Sidebar
    st.sidebar.header("üéõÔ∏è Configura√ß√µes da An√°lise")
    
    # Op√ß√£o de dados
    data_source = st.sidebar.selectbox(
        "üìä Escolha a fonte dos dados:",
        ["Dados da Ro√ßa do Jo√£o (Exemplo)", "Upload de Arquivo"]
    )
    
    # Carregar dados
    data = None
    if data_source == "Upload de Arquivo":
        uploaded_file = st.sidebar.file_uploader(
            "üìÅ Fa√ßa upload do seu CSV agr√≠cola", 
            type=['csv'],
            help="O arquivo deve conter dados de safras com uma coluna target (vendas, receita, etc.)"
        )
        if uploaded_file:
            try:
                data = pd.read_csv(uploaded_file)
                st.sidebar.success("‚úÖ Arquivo carregado!")
            except Exception as e:
                st.sidebar.error(f"‚ùå Erro: {e}")
                return
        else:
            st.info("üìÇ Fa√ßa upload de um arquivo CSV para analisar seus pr√≥prios dados agr√≠colas")
            return
    else:
        data = generate_sample_data()

    # Mostrar informa√ß√µes dos dados
    st.header("üìä Dataset da Fazenda Carregado")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìà Safras Analisadas", len(data))
    with col2:
        st.metric("üìã Vari√°veis", data.shape[1])
    with col3:
        receita_media = data['vendas_safra_reais'].mean() if 'vendas_safra_reais' in data.columns else 0
        st.metric("üí∞ Receita M√©dia", f"R$ {receita_media:,.0f}")
    with col4:
        missing = data.isnull().sum().sum()
        st.metric("‚ùì Dados Faltantes", missing)

    # Preview dos dados
    with st.expander("üëÄ Visualizar Dados da Fazenda", expanded=False):
        tab1, tab2, tab3 = st.tabs(["üìã Dados Brutos", "üìä Estat√≠sticas", "üåæ Insights R√°pidos"])
        
        with tab1:
            st.dataframe(data, use_container_width=True)
        
        with tab2:
            st.dataframe(data.describe(), use_container_width=True)
            
        with tab3:
            if 'vendas_safra_reais' in data.columns:
                col1, col2 = st.columns(2)
                with col1:
                    st.write("**üèÜ Melhor Safra:**")
                    melhor_safra = data.loc[data['vendas_safra_reais'].idxmax()]
                    st.write(f"Receita: R$ {melhor_safra['vendas_safra_reais']:,.0f}")
                    
                with col2:
                    st.write("**üìâ Pior Safra:**")
                    pior_safra = data.loc[data['vendas_safra_reais'].idxmin()]
                    st.write(f"Receita: R$ {pior_safra['vendas_safra_reais']:,.0f}")

    # Configura√ß√µes da an√°lise
    st.sidebar.markdown("---")
    st.sidebar.subheader("‚öôÔ∏è Configura√ß√µes da An√°lise")
    
    include_bayesian = st.sidebar.checkbox("üß† Incluir An√°lise Bayesiana", value=True)
    
    if include_bayesian:
        st.sidebar.markdown("**Par√¢metros MCMC:**")
        draws = st.sidebar.slider("üé≤ Draws:", 500, 2000, 1000, 100)
        tune = st.sidebar.slider("üîß Tune:", 500, 2000, 1000, 100)
        st.sidebar.info(f"Total de amostras: {draws * 2} (2 chains)")

    # BOT√ÉO PRINCIPAL
    st.markdown("---")
    
    if st.button("üöÄ **INICIAR AN√ÅLISE COMPLETA DA FAZENDA**", type="primary"):
        
        # Container para toda a an√°lise
        analysis_container = st.container()
        
        with analysis_container:
            
            # Barra de progresso
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            try:
                # 1. Preprocessamento
                status_text.text("üîÑ Preparando dados da fazenda...")
                progress_bar.progress(10)
                
                processed_data, features, target = preprocess_data(data)
                if processed_data is None:
                    return
                
                st.success(f"‚úÖ **Dados processados!** Target: `{target}` | Features: `{len(features)}`")
                progress_bar.progress(20)
                
                # 2. MLE Analysis
                status_text.text("üîç Executando an√°lise MLE (Linear)...")
                progress_bar.progress(35)
                
                mle_results, mle_r2, mle_mse, scaler, mle_model = run_mle_analysis(processed_data, features, target)
                
                st.header("1Ô∏è‚É£ An√°lise Linear (MLE) - Rela√ß√µes Diretas")
                st.markdown("*Mostra o impacto linear de cada fator nas vendas da safra*")
                
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.dataframe(mle_results, use_container_width=True)
                with col2:
                    st.metric("üìä R¬≤ Score", f"{mle_r2:.3f}")
                    st.metric("üìè MSE", f"{mle_mse:,.0f}")
                    
                    # Interpreta√ß√£o para Jo√£o
                    if mle_r2 > 0.8:
                        st.success("üéØ Excelente ajuste!")
                    elif mle_r2 > 0.6:
                        st.warning("‚ö†Ô∏è Ajuste moderado")
                    else:
                        st.error("‚ùå Ajuste ruim")
                
                progress_bar.progress(50)
                
                # 3. MAP Analysis
                status_text.text("üéØ Executando an√°lise MAP (Ridge)...")
                progress_bar.progress(60)
                
                map_results, map_r2, map_mse, map_model = run_map_analysis(processed_data, features, target, scaler)
                
                st.header("2Ô∏è‚É£ An√°lise Regularizada (MAP) - Controle de Overfitting")
                st.markdown("*Modelo mais conservador, evita superajuste aos dados hist√≥ricos*")
                
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.dataframe(map_results, use_container_width=True)
                with col2:
                    st.metric("üìä R¬≤ Score", f"{map_r2:.3f}")
                    st.metric("üìè MSE", f"{map_mse:,.0f}")
                
                progress_bar.progress(75)
                
                # 4. Bayesian Analysis (se habilitado)
                bayesian_results = None
                if include_bayesian:
                    status_text.text("üß† Executando an√°lise Bayesiana (pode demorar)...")
                    progress_bar.progress(80)
                    
                    with st.spinner("üîÑ Executando MCMC Sampling..."):
                        bayesian_output = run_bayesian_analysis(processed_data, features, target, scaler, draws, tune)
                    
                    if bayesian_output:
                        bayesian_results, trace = bayesian_output
                        
                        st.header("3Ô∏è‚É£ An√°lise Bayesiana - Incerteza Quantificada")
                        st.markdown("*Mostra n√£o apenas o impacto, mas tamb√©m a confian√ßa em cada estimativa*")
                        
                        st.dataframe(bayesian_results, use_container_width=True)
                        
                        # Relat√≥rio Bayesiano espec√≠fico para Jo√£o
                        st.subheader("üìã Insights para a Ro√ßa do Jo√£o")
                        
                        # Features mais importantes
                        st.write("**üéØ Fatores Mais Importantes para as Vendas:**")
                        top_features = bayesian_results.nlargest(3, '|Mean|')
                        for idx, (_, row) in enumerate(top_features.iterrows(), 1):
                            uncertainty_level = "üìç Baixa" if row['sd'] < row['mean']/3 else "‚ö†Ô∏è Alta"
                            impacto = "positivo üìà" if row['mean'] > 0 else "negativo üìâ"
                            st.write(f"**{idx}. {row['Feature']}**: Impacto {impacto} de R$ {row['mean']:,.0f} (¬±{row['sd']:,.0f}) - Incerteza: {uncertainty_level}")
                        
                        # Features com alta incerteza
                        high_uncertainty = bayesian_results[bayesian_results['sd'] > bayesian_results['mean'].abs()/2]
                        if len(high_uncertainty) > 0:
                            st.write("**‚ö†Ô∏è Fatores que Precisam de Mais Dados:**")
                            for _, row in high_uncertainty.iterrows():
                                if row['hdi_3%'] < 0 < row['hdi_97%']:
                                    rec = "‚ùì Efeito indeterminado - coletar mais dados"
                                elif row['hdi_3%'] > 0:
                                    rec = "üìà Provavelmente positivo"
                                else:
                                    rec = "üìâ Provavelmente negativo"
                                st.write(f"‚Ä¢ **{row['Feature']}**: {rec} (HDI: [R$ {row['hdi_3%']:,.0f}, R$ {row['hdi_97%']:,.0f}])")
                
                progress_bar.progress(90)
                
                # 5. Visualiza√ß√µes
                status_text.text("üìä Criando visualiza√ß√µes...")
                
                st.header("4Ô∏è‚É£ Visualiza√ß√µes Comparativas")
                
                # Gr√°fico de compara√ß√£o
                fig1 = create_comparison_plot(mle_results, map_results, bayesian_results)
                st.pyplot(fig1)
                
                # Gr√°fico de incerteza (se Bayesian dispon√≠vel)
                if bayesian_results is not None:
                    fig2 = create_uncertainty_plot(bayesian_results)
                    if fig2:
                        st.pyplot(fig2)

                # 6. Entropia
                status_text.text("üìä Calculando entropia dos modelos...")
                progress_bar.progress(95)

                # Predi√ß√µes dos modelos para an√°lise de entropia
                X_scaled = scaler.transform(processed_data[features])
                y_true = processed_data[target]
                y_pred_mle = mle_model.predict(X_scaled)
                y_pred_map = map_model.predict(X_scaled)

                # An√°lise de entropia
                show_entropy_section(
                    y_true=y_true,
                    y_pred_mle=y_pred_mle,
                    y_pred_map=y_pred_map,
                    y_pred_bayes=None
                )
                
                # 7. Recomenda√ß√µes para Jo√£o
                st.header("6Ô∏è‚É£ Recomenda√ß√µes Estrat√©gicas para Jo√£o")
                
                # An√°lise dos resultados mais importantes
                if bayesian_results is not None:
                    top_factor = bayesian_results.iloc[0]
                    st.success(f"üåü **Fator #1 de Impacto:** {top_factor['Feature']}")
                    st.write(f"Cada unidade de melhoria pode gerar R$ {top_factor['mean']:,.0f} a mais por safra")
                    
                    # Recomenda√ß√µes espec√≠ficas baseadas nos fatores
                    recommendations = []
                    for _, row in bayesian_results.head(3).iterrows():
                        factor = row['Feature']
                        impact = row['mean']
                        
                        if 'clima' in factor.lower() or 'chuva' in factor.lower():
                            recommendations.append(f"üå¶Ô∏è **{factor}**: Investir em irriga√ß√£o ou sistema de capta√ß√£o de √°gua")
                        elif 'tiktok' in factor.lower():
                            recommendations.append(f"üì± **{factor}**: Expandir estrat√©gia de marketing digital da neta")
                        elif 'export' in factor.lower():
                            recommendations.append(f"üåç **{factor}**: Focar em conseguir mais contratos de exporta√ß√£o")
                        elif 'preco' in factor.lower():
                            recommendations.append(f"üí∞ **{factor}**: Monitorar pre√ßos e timing de venda")
                        elif 'hectares' in factor.lower():
                            recommendations.append(f"üåæ **{factor}**: Considerar expans√£o da √°rea plantada")
                    
                    st.write("**üéØ A√ß√µes Priorit√°rias:**")
                    for rec in recommendations:
                        st.write(f"‚Ä¢ {rec}")
                
                # Finalizar
                progress_bar.progress(100)
                status_text.text("‚úÖ An√°lise conclu√≠da!")
                
                # Mensagem de sucesso
                st.balloons()
                st.success("**üåæ An√°lise completa da Ro√ßa do Jo√£o! Todos os modelos foram executados com sucesso.**")
                st.success("‚ú® Imagine o que podemos fazer com **os dados da sua fazenda**.")
                
                # Mensagem de contato espec√≠fica para agroneg√≥cio
                st.markdown("""
                üí° **Do plantio √† colheita, transformamos dados em decis√µes inteligentes.**  
                üìà **Da tradi√ß√£o √† inova√ß√£o, otimizamos cada safra com ci√™ncia de dados.**  

                üëâ **Entre em contato e vamos descobrir juntos os segredos da sua terra**  
                üìß [contato@plexonatural.com](mailto:contato@plexonatural.com)
                üåæ **Especialistas em IA para Agroneg√≥cio**
                """)
                
                # Download
                if bayesian_results is not None:
                    csv_data = bayesian_results.to_csv(index=False)
                    st.download_button(
                        label="üì• Baixar An√°lise Completa da Fazenda",
                        data=csv_data,
                        file_name=f"analise_roca_joao_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.csv",
                        mime="text/csv"
                    )
                
            except Exception as e:
                progress_bar.progress(0)
                status_text.text("‚ùå Erro na an√°lise")
                st.error(f"**Erro durante a an√°lise:** {str(e)}")
                
                with st.expander("üîç Detalhes do Erro"):
                    import traceback
                    st.code(traceback.format_exc())

    # Rodap√© informativo para agroneg√≥cio
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: gray;'>
    <b>üåæ Ro√ßa do Jo√£o - Intelig√™ncia Artificial para o Agroneg√≥cio</b><br>
    <b>Dica:</b> Para melhores resultados, certifique-se de ter dados de pelo menos 20 safras<br>
    <b>Algoritmos:</b> Scikit-learn (MLE/MAP) + PyMC (Bayesian MCMC) + An√°lise de Entropia
    </div>
    """, unsafe_allow_html=True)

# IMPORTANTE: S√≥ executar main() se for o arquivo principal
if __name__ == "__main__":
    main()
